<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
    	http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
        
        
	<context:property-placeholder location="classpath*:config/jdbc.properties"/>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url,user,pass -->
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 配置初始化大小,最小增长,最大活动连接 -->
		<property name="initialSize" value="${jdbc.initialSize}"/>
		<property name="minIdle" value="${jdbc.minIdle}"/>
		<property name="maxActive" value="${jdbc.maxActive}"/>
		<!-- 获取连接超时时间,单位毫秒 -->
		<property name="maxWait" value="${jdbc.maxWait}"/>
		
		<!-- 设置间隔多久进行一次检查关闭空闲链接,单位毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
		
		<!-- 设置每个连接在池中的最小生存时间,单位毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
		
		<property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="wall,stat" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="src/main/java/com/scarecrow/elearning/config/sqlMapConfig.xml"></property>
	</bean>
	
	<bean id="userDao" class="com.scarecrow.elearning.uac.dao.UserDao">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	
    <!-- this is the service object that we want to make transactional -->
<!--     <bean id="fooService" class="x.y.service.DefaultFooService"/> -->

    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
<!--     <tx:advice id="txAdvice" transaction-manager="txManager"> -->
<!--         the transactional semantics... -->
<!--         <tx:attributes> -->
<!--             all methods starting with 'get' are read-only -->
<!--             <tx:method name="get*" read-only="true"/> -->
<!--             other methods use the default transaction settings (see below) -->
<!--             <tx:method name="*"/> -->
<!--         </tx:attributes> -->
<!--     </tx:advice> -->

    <!-- ensure that the above transactional advice runs for any execution
        of an operation defined by the FooService interface -->
<!--     <aop:config> -->
<!--         <aop:pointcut id="fooServiceOperation" expression="execution(* x.y.service.FooService.*(..))"/> -->
<!--         <aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/> -->
<!--     </aop:config> -->

    <!-- similarly, don't forget the PlatformTransactionManager -->
<!--     <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
<!--         <property name="dataSource" ref="dataSource"/> -->
<!--     </bean> -->

    <!-- other <bean/> definitions here -->

</beans>